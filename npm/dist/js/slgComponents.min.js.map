{"version":3,"names":[],"mappings":"","sources":["slgComponents.min.js"],"sourcesContent":["angular.module('slgComponents', []);\r\n\r\nconsole.log(\"slgComponents v.0.0.20\");\r\n\r\nfunction slgGetValueFromNestedObject(obj, paramString) {\r\n\tvar names = paramString.split('.');\r\n\r\n\tvar nextObj = obj;\r\n\tfor (i = 0; i < names.length; i++)\r\n\t\tnextObj = obj[names[i]];\r\n\r\n\treturn nextObj;\r\n}\r\n\r\nfunction slgGuid() {\r\n\tfunction s4() {\r\n\t\treturn Math.floor((1 + Math.random()) * 0x10000)\r\n\t\t\t\t   .toString(16)\r\n\t\t\t\t   .substring(1);\r\n\t}\r\n\treturn s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n\t\t   s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nfunction slgGetStyle(oElm, strCssRule) {\r\n\tvar strValue = \"\";\r\n\tif (document.defaultView && document.defaultView.getComputedStyle) {\r\n\t\tstrValue = document.defaultView.getComputedStyle(oElm, \"\").getPropertyValue(strCssRule);\r\n\t}\r\n\telse if (oElm.currentStyle) {\r\n\t\tstrCssRule = strCssRule.replace(/\\-(\\w)/g, function (strMatch, p1) {\r\n\t\t\treturn p1.toUpperCase();\r\n\t\t});\r\n\t\tstrValue = oElm.currentStyle[strCssRule];\r\n\t}\r\n\treturn strValue;\r\n}\r\n\r\n//fgnass.github.com/spin.js#v1.2.5\r\n/**\r\n * Copyright (c) 2011 Felix Gnass [fgnass at neteye dot de]\r\n * Licensed under the MIT license\r\n */\r\n\r\nvar prefixes = ['webkit', 'Moz', 'ms', 'O']; /* Vendor prefixes */\r\nvar animations = {}; /* Animation rules keyed by their name */\r\nvar useCssAnimations;\r\n\r\n/**\r\n * Utility function to create elements. If no tag name is given,\r\n * a DIV is created. Optionally properties can be passed.\r\n */\r\nfunction createEl(tag, prop) {\r\n\tvar el = document.createElement(tag || 'div');\r\n\tvar n;\r\n\r\n\tfor (n in prop) {\r\n\t\tel[n] = prop[n];\r\n\t}\r\n\treturn el;\r\n}\r\n\r\n/**\r\n * Appends children and returns the parent.\r\n */\r\nfunction ins(parent /* child1, child2, ...*/) {\r\n\tfor (var i = 1, n = arguments.length; i < n; i++) {\r\n\t\tparent.appendChild(arguments[i]);\r\n\t}\r\n\treturn parent;\r\n}\r\n\r\n/**\r\n * Insert a new stylesheet to hold the @keyframe or VML rules.\r\n */\r\nvar sheet = function () {\r\n\tvar el = createEl('style');\r\n\tins(document.getElementsByTagName('head')[0], el);\r\n\treturn el.sheet || el.styleSheet;\r\n}();\r\n\r\n/**\r\n * Creates an opacity keyframe animation rule and returns its name.\r\n * Since most mobile Webkits have timing issues with animation-delay,\r\n * we create separate rules for each line/segment.\r\n */\r\nfunction addAnimation(alpha, trail, i, lines) {\r\n\tvar name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-');\r\n\tvar start = 0.01 + i / lines * 100;\r\n\tvar z = Math.max(1 - (1 - alpha) / trail * (100 - start), alpha);\r\n\tvar prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase();\r\n\tvar pre = prefix && '-' + prefix + '-' || '';\r\n\r\n\tif (!animations[name]) {\r\n\t\tsheet.insertRule(\r\n\t\t  '@' + pre + 'keyframes ' + name + '{' +\r\n\t\t  '0%{opacity:' + z + '}' +\r\n\t\t  start + '%{opacity:' + alpha + '}' +\r\n\t\t  (start + 0.01) + '%{opacity:1}' +\r\n\t\t  (start + trail) % 100 + '%{opacity:' + alpha + '}' +\r\n\t\t  '100%{opacity:' + z + '}' +\r\n\t\t  '}', 0);\r\n\t\tanimations[name] = 1;\r\n\t}\r\n\treturn name;\r\n}\r\n\r\n/**\r\n * Tries various vendor prefixes and returns the first supported property.\r\n **/\r\nfunction vendor(el, prop) {\r\n\tvar s = el.style;\r\n\tvar pp;\r\n\tvar i;\r\n\r\n\tif (s[prop] !== undefined) return prop;\r\n\tprop = prop.charAt(0).toUpperCase() + prop.slice(1);\r\n\tfor (i = 0; i < prefixes.length; i++) {\r\n\t\tpp = prefixes[i] + prop;\r\n\t\tif (s[pp] !== undefined) return pp;\r\n\t}\r\n}\r\n\r\n/**\r\n * Sets multiple style properties at once.\r\n */\r\nfunction css(el, prop) {\r\n\tfor (var n in prop) {\r\n\t\tel.style[vendor(el, n) || n] = prop[n];\r\n\t}\r\n\treturn el;\r\n}\r\n\r\n/**\r\n * Fills in default values.\r\n */\r\nfunction merge(obj) {\r\n\tfor (var i = 1; i < arguments.length; i++) {\r\n\t\tvar def = arguments[i];\r\n\t\tfor (var n in def) {\r\n\t\t\tif (obj[n] === undefined) obj[n] = def[n];\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n}\r\n\r\n/**\r\n * Returns the absolute page-offset of the given element.\r\n */\r\nfunction pos(el) {\r\n\tvar o = { x: el.offsetLeft, y: el.offsetTop };\r\n\twhile ((el = el.offsetParent)) {\r\n\t\to.x += el.offsetLeft;\r\n\t\to.y += el.offsetTop;\r\n\t}\r\n\treturn o;\r\n}\r\n\r\nvar defaults = {\r\n\tlines: 12,            // The number of lines to draw\r\n\tlength: 7,            // The length of each line\r\n\twidth: 5,             // The line thickness\r\n\tradius: 10,           // The radius of the inner circle\r\n\trotate: 0,            // rotation offset\r\n\tcolor: '#000',        // #rgb or #rrggbb\r\n\tspeed: 1,             // Rounds per second\r\n\ttrail: 100,           // Afterglow percentage\r\n\topacity: 1 / 4,         // Opacity of the lines\r\n\tfps: 20,              // Frames per second when using setTimeout()\r\n\tzIndex: 2e9,          // Use a high z-index by default\r\n\tclassName: 'slgSpinner', // CSS class to assign to the element\r\n\ttop: 'auto',          // center vertically\r\n\tleft: 'auto'          // center horizontally\r\n};\r\n\r\n/** The constructor */\r\nvar slgSpinner = function slgSpinner(o) {\r\n\tif (!this.spin) return new slgSpinner(o);\r\n\tthis.opts = merge(o || {}, slgSpinner.defaults, defaults);\r\n};\r\n\r\nslgSpinner.defaults = {};\r\nmerge(slgSpinner.prototype, {\r\n\tspin: function (target) {\r\n\t\tthis.stop();\r\n\t\tvar self = this;\r\n\t\tvar o = self.opts;\r\n\t\tvar el = self.el = css(createEl(0, { className: o.className }), { position: 'relative', zIndex: o.zIndex });\r\n\t\tvar mid = o.radius + o.length + o.width;\r\n\t\tvar ep; // element position\r\n\t\tvar tp; // target position\r\n\r\n\t\tif (target) {\r\n\t\t\ttarget.insertBefore(el, target.firstChild || null);\r\n\t\t\ttp = pos(target);\r\n\t\t\tep = pos(el);\r\n\t\t\tcss(el, {\r\n\t\t\t\tleft: (o.left == 'auto' ? tp.x - ep.x + (target.offsetWidth >> 1) : o.left + mid) + 'px',\r\n\t\t\t\ttop: (o.top == 'auto' ? tp.y - ep.y + (target.offsetHeight >> 1) : o.top + mid) + 'px'\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tel.setAttribute('aria-role', 'progressbar');\r\n\t\tself.lines(el, self.opts);\r\n\r\n\t\tif (!useCssAnimations) {\r\n\t\t\t// No CSS animation support, use setTimeout() instead\r\n\t\t\tvar i = 0;\r\n\t\t\tvar fps = o.fps;\r\n\t\t\tvar f = fps / o.speed;\r\n\t\t\tvar ostep = (1 - o.opacity) / (f * o.trail / 100);\r\n\t\t\tvar astep = f / o.lines;\r\n\r\n\t\t\t!function anim() {\r\n\t\t\t\ti++;\r\n\t\t\t\tfor (var s = o.lines; s; s--) {\r\n\t\t\t\t\tvar alpha = Math.max(1 - (i + s * astep) % f * ostep, o.opacity);\r\n\t\t\t\t\tself.opacity(el, o.lines - s, alpha, o);\r\n\t\t\t\t}\r\n\t\t\t\tself.timeout = self.el && setTimeout(anim, ~~(1000 / fps));\r\n\t\t\t}();\r\n\t\t}\r\n\t\treturn self;\r\n\t},\r\n\tstop: function () {\r\n\t\tvar el = this.el;\r\n\t\tif (el) {\r\n\t\t\tclearTimeout(this.timeout);\r\n\t\t\tif (el.parentNode) el.parentNode.removeChild(el);\r\n\t\t\tthis.el = undefined;\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\tlines: function (el, o) {\r\n\t\tvar i = 0;\r\n\t\tvar seg;\r\n\r\n\t\tfunction fill(color, shadow) {\r\n\t\t\treturn css(createEl(), {\r\n\t\t\t\tposition: 'absolute',\r\n\t\t\t\twidth: (o.length + o.width) + 'px',\r\n\t\t\t\theight: o.width + 'px',\r\n\t\t\t\tbackground: color,\r\n\t\t\t\tboxShadow: shadow,\r\n\t\t\t\ttransformOrigin: 'left',\r\n\t\t\t\ttransform: 'rotate(' + ~~(360 / o.lines * i + o.rotate) + 'deg) translate(' + o.radius + 'px' + ',0)',\r\n\t\t\t\tborderRadius: (o.width >> 1) + 'px'\r\n\t\t\t});\r\n\t\t}\r\n\t\tfor (; i < o.lines; i++) {\r\n\t\t\tseg = css(createEl(), {\r\n\t\t\t\tposition: 'absolute',\r\n\t\t\t\ttop: 1 + ~(o.width / 2) + 'px',\r\n\t\t\t\ttransform: o.hwaccel ? 'translate3d(0,0,0)' : '',\r\n\t\t\t\topacity: o.opacity,\r\n\t\t\t\tanimation: useCssAnimations && addAnimation(o.opacity, o.trail, i, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\r\n\t\t\t});\r\n\t\t\tif (o.shadow) ins(seg, css(fill('#000', '0 0 4px ' + '#000'), { top: 2 + 'px' }));\r\n\t\t\tins(el, ins(seg, fill(o.color, '0 0 1px rgba(0,0,0,.1)')));\r\n\t\t}\r\n\t\treturn el;\r\n\t},\r\n\topacity: function (el, i, val) {\r\n\t\tif (i < el.childNodes.length) el.childNodes[i].style.opacity = val;\r\n\t}\r\n});\r\n\r\n/////////////////////////////////////////////////////////////////////////\r\n// VML rendering for IE\r\n/////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * Check and init VML support\r\n */\r\n!function () {\r\n\r\n\tfunction vml(tag, attr) {\r\n\t\treturn createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr);\r\n\t}\r\n\r\n\tvar s = css(createEl('group'), { behavior: 'url(#default#VML)' });\r\n\r\n\tif (!vendor(s, 'transform') && s.adj) {\r\n\r\n\t\t// VML support detected. Insert CSS rule ...\r\n\t\tsheet.addRule('.spin-vml', 'behavior:url(#default#VML)');\r\n\r\n\t\tslgSpinner.prototype.lines = function (el, o) {\r\n\t\t\tvar r = o.length + o.width;\r\n\t\t\tvar s = 2 * r;\r\n\r\n\t\t\tfunction grp() {\r\n\t\t\t\treturn css(vml('group', { coordsize: s + ' ' + s, coordorigin: -r + ' ' + -r }), { width: s, height: s });\r\n\t\t\t}\r\n\r\n\t\t\tvar margin = -(o.width + o.length) * 2 + 'px';\r\n\t\t\tvar g = css(grp(), { position: 'absolute', top: margin, left: margin });\r\n\r\n\t\t\tvar i;\r\n\r\n\t\t\tfunction seg(i, dx, filter) {\r\n\t\t\t\tins(g,\r\n\t\t\t\t  ins(css(grp(), { rotation: 360 / o.lines * i + 'deg', left: ~~dx }),\r\n\t\t\t\t\tins(css(vml('roundrect', { arcsize: 1 }), {\r\n\t\t\t\t\t\twidth: r,\r\n\t\t\t\t\t\theight: o.width,\r\n\t\t\t\t\t\tleft: o.radius,\r\n\t\t\t\t\t\ttop: -o.width >> 1,\r\n\t\t\t\t\t\tfilter: filter\r\n\t\t\t\t\t}),\r\n\t\t\t\t\t  vml('fill', { color: o.color, opacity: o.opacity }),\r\n\t\t\t\t\t  vml('stroke', { opacity: 0 }) // transparent stroke to fix color bleeding upon opacity change\r\n\t\t\t\t\t)\r\n\t\t\t\t  )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tif (o.shadow) {\r\n\t\t\t\tfor (i = 1; i <= o.lines; i++) {\r\n\t\t\t\t\tseg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (i = 1; i <= o.lines; i++) seg(i);\r\n\t\t\treturn ins(el, g);\r\n\t\t};\r\n\t\tslgSpinner.prototype.opacity = function (el, i, val, o) {\r\n\t\t\tvar c = el.firstChild;\r\n\t\t\to = o.shadow && o.lines || 0;\r\n\t\t\tif (c && i + o < c.childNodes.length) {\r\n\t\t\t\tc = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild;\r\n\t\t\t\tif (c) c.opacity = val;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\telse {\r\n\t\tuseCssAnimations = vendor(s, 'animation');\r\n\t}\r\n}();\r\n\r\n\r\n\nangular.module('slgComponents')\r\n.directive('slgButtonSpinner', ['$timeout', '$interval', '$q', function ($timeout, $interval, $q) {\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\tscope: {},\r\n\t\tlink: function (scope, element, attr) {\r\n\t\t\tscope.expanded = false;\r\n\t\t\tscope.inProcess = false;\r\n\t\t\tscope.showSuccessIndicator = true;\r\n\t\t\tscope.errorFieldName = null;\r\n\r\n\t\t\telement.append(angular.element(\"<div id='slgButtonSpinner_spinner_\" + scope.$id + \"' class='slgButtonSpinner_spinner'></div>\"));\r\n\t\t\telement.append(angular.element(\"<div id='slgButtonSpinner_check_\" + scope.$id + \"' class='slgButtonSpinner_check'><i class='fa fa-check-circle-o'></i></div>\"));\r\n\t\t\telement.append(angular.element(\"<div id='slgButtonSpinner_error_\" + scope.$id + \"' class='slgButtonSpinner_error'><i class='fa fa-times-circle-o'></i></div>\"));\r\n\r\n\t\t\tscope.$watch('$parent.' + attr[\"slgButtonSpinner\"], function (newVal, oldVal) {\r\n\t\t\t\tif (oldVal === newVal)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tvar status = (newVal) ? newVal.toLowerCase() : \"\";\r\n\r\n\t\t\t\tswitch (status) {\r\n\t\t\t\t\tcase \"showspinner\":\r\n\t\t\t\t\t\telement[0].disabled = true;\r\n\r\n\t\t\t\t\t\tscope.waitToShowSpinner = $timeout(function () {\r\n\t\t\t\t\t\t\texpand().then(function () {\r\n\t\t\t\t\t\t\t\tshowSpinner();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}, 100)\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"hidespinner\":\r\n\t\t\t\t\t\telement[0].disabled = false;\r\n\r\n\t\t\t\t\t\thideSpinner();\r\n\t\t\t\t\t\tcollapse();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"showok\":\r\n\t\t\t\t\t\telement[0].disabled = false;\r\n\r\n\t\t\t\t\t\thideSpinner();\r\n\r\n\t\t\t\t\t\tvar okCheckDiv = document.getElementById(\"slgButtonSpinner_check_\" + scope.$id);\r\n\t\t\t\t\t\tokCheckDiv.style.display = \"inline-block\";\r\n\r\n\t\t\t\t\t\tscope.okTimeout = $timeout(function () {\r\n\t\t\t\t\t\t\tvar okCheckDiv = document.getElementById(\"slgButtonSpinner_check_\" + scope.$id);\r\n\t\t\t\t\t\t\tokCheckDiv.style.display = \"none\";\r\n\t\t\t\t\t\t\tcollapse();\r\n\t\t\t\t\t\t}, 3000);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"showerror\":\r\n\t\t\t\t\t\thideSpinner();\r\n\t\t\t\t\t\telement[0].disabled = false;\r\n\r\n\t\t\t\t\t\t$timeout.cancel(scope.okTimeout);\r\n\t\t\t\t\t\tvar okCheckDiv = document.getElementById(\"slgButtonSpinner_check_\" + scope.$id);\r\n\t\t\t\t\t\tokCheckDiv.style.display = \"none\";\r\n\r\n\t\t\t\t\t\tvar errorDiv = document.getElementById(\"slgButtonSpinner_error_\" + scope.$id);\r\n\t\t\t\t\t\terrorDiv.style.display = \"inline-block\";\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"reset\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\thideSpinner();\r\n\r\n\t\t\t\t\t\tvar okCheckDiv = document.getElementById(\"slgButtonSpinner_check_\" + scope.$id);\r\n\t\t\t\t\t\tokCheckDiv.style.display = \"none\";\r\n\r\n\t\t\t\t\t\tvar errorDiv = document.getElementById(\"slgButtonSpinner_error_\" + scope.$id);\r\n\t\t\t\t\t\terrorDiv.style.display = \"none\";\r\n\r\n\t\t\t\t\t\tcollapse().then(function () {\r\n\t\t\t\t\t\t\telement[0].disabled = false;\r\n\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tfunction expand() {\r\n\t\t\t\t$timeout.cancel(scope.okTimeout);\r\n\t\t\t\tvar okCheckDiv = document.getElementById(\"slgButtonSpinner_check_\" + scope.$id);\r\n\t\t\t\tokCheckDiv.style.display = \"none\";\r\n\r\n\t\t\t\tvar errorDiv = document.getElementById(\"slgButtonSpinner_error_\" + scope.$id);\r\n\t\t\t\terrorDiv.style.display = \"none\";\r\n\r\n\t\t\t\tif (scope.$parent[attr[\"slgButtonSpinnerError\"]])\r\n\t\t\t\t\tscope.$parent[attr[\"slgButtonSpinnerError\"]] = null;\r\n\r\n\t\t\t\tif (scope.expanded === true)\r\n\t\t\t\t\treturn $q.when();\r\n\r\n\t\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t\twaitForInProcessToFinish().then(function () {\r\n\t\t\t\t\tscope.inProcess = true;\r\n\t\t\t\t\tscope.expanded = true;\r\n\r\n\t\t\t\t\t// default button\r\n\t\t\t\t\tvar expandPixels = 4;\r\n\r\n\t\t\t\t\tif (element[0].className.toLowerCase().indexOf(\"btn-xs\") >= 0)\r\n\t\t\t\t\t\texpandPixels = 3.5;\r\n\t\t\t\t\telse if (element[0].className.toLowerCase().indexOf(\"btn-sm\") >= 0)\r\n\t\t\t\t\t\texpandPixels = 4;\r\n\t\t\t\t\telse if (element[0].className.toLowerCase().indexOf(\"btn-xl\") >= 0)\r\n\t\t\t\t\t\texpandPixels = 5;\r\n\r\n\t\t\t\t\tscope.originalPadding = parseInt(slgGetStyle(element[0], \"padding-right\").replace('px', ''));\r\n\t\t\t\t\tvar nextPadding = scope.originalPadding;\r\n\r\n\t\t\t\t\tvar count = 40;\r\n\t\t\t\t\tvar boingInterval = $interval(function () {\r\n\t\t\t\t\t\tif (count > 32) {\r\n\t\t\t\t\t\t\tnextPadding = nextPadding - 1;\r\n\t\t\t\t\t\t\telement[0].style.paddingRight = nextPadding + \"px\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 24) {\r\n\t\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 14) {\r\n\t\t\t\t\t\t\tnextPadding = nextPadding + expandPixels;\r\n\t\t\t\t\t\t\telement[0].style.paddingRight = nextPadding + \"px\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 10) {\r\n\t\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 0) {\r\n\t\t\t\t\t\t\tnextPadding = nextPadding - 1;\r\n\t\t\t\t\t\t\telement[0].style.paddingRight = nextPadding + \"px\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t\t$interval.cancel(boingInterval);\r\n\t\t\t\t\t\t\tscope.inProcess = false;\r\n\r\n\t\t\t\t\t\t\tdeferred.resolve();\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}, 10);\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\r\n\t\t\tfunction collapse() {\r\n\t\t\t\tif (scope.expanded === false)\r\n\t\t\t\t\treturn $q.when();\r\n\r\n\t\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t\twaitForInProcessToFinish().then(function () {\r\n\t\t\t\t\tscope.inProcess = true;\r\n\t\t\t\t\tscope.expanded = false;\r\n\r\n\t\t\t\t\tvar spinnerDiv = document.getElementById(\"slgButtonSpinner_spinner_\" + scope.$id);\r\n\t\t\t\t\tspinnerDiv.style.display = \"none\";\r\n\r\n\t\t\t\t\t// default button\r\n\t\t\t\t\tvar expandPixels = 4;\r\n\r\n\t\t\t\t\tif (element[0].className.toLowerCase().indexOf(\"btn-xs\") >= 0)\r\n\t\t\t\t\t\texpandPixels = 3.5;\r\n\t\t\t\t\telse if (element[0].className.toLowerCase().indexOf(\"btn-sm\") >= 0)\r\n\t\t\t\t\t\texpandPixels = 4;\r\n\t\t\t\t\telse if (element[0].className.toLowerCase().indexOf(\"btn-xl\") >= 0)\r\n\t\t\t\t\t\texpandPixels = 5;\r\n\r\n\t\t\t\t\tvar nextPadding = parseInt(slgGetStyle(element[0], \"padding-right\").replace('px', ''));\r\n\r\n\t\t\t\t\tvar count = 40;\r\n\t\t\t\t\tvar boingInterval = $interval(function () {\r\n\t\t\t\t\t\tif (count > 32) {\r\n\t\t\t\t\t\t\tnextPadding = nextPadding + 1;\r\n\t\t\t\t\t\t\telement[0].style.paddingRight = nextPadding + \"px\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 24) {\r\n\t\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 14) {\r\n\t\t\t\t\t\t\tnextPadding = nextPadding - expandPixels;\r\n\t\t\t\t\t\t\telement[0].style.paddingRight = nextPadding + \"px\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 10) {\r\n\t\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (count > 0) {\r\n\t\t\t\t\t\t\tnextPadding = nextPadding + 1;\r\n\t\t\t\t\t\t\telement[0].style.paddingRight = nextPadding + \"px\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t$interval.cancel(boingInterval);\r\n\t\t\t\t\t\t\tscope.inProcess = false;\r\n\r\n\t\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}, 10);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\r\n\t\t\tfunction showSpinner() {\r\n\t\t\t\tvar opts = {\r\n\t\t\t\t\tcolor: \"#fff\",\r\n\t\t\t\t\tradius: 4,\r\n\t\t\t\t\tlength: 4,\r\n\t\t\t\t\twidth: 2\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tif (element[0].className.toLowerCase().indexOf(\"btn-xs\") >= 0) {\r\n\t\t\t\t\topts.radius = 3;\r\n\t\t\t\t\topts.length = 3;\r\n\t\t\t\t\topts.width = 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if (element[0].className.toLowerCase().indexOf(\"btn-sm\") >= 0) {\r\n\t\t\t\t\topts.radius = 3;\r\n\t\t\t\t\topts.length = 4;\r\n\t\t\t\t\topts.width = 2;\r\n\t\t\t\t}\r\n\t\t\t\telse if (element[0].className.toLowerCase().indexOf(\"btn-xl\") >= 0) {\r\n\t\t\t\t\topts.radius = 5;\r\n\t\t\t\t\topts.length = 5;\r\n\t\t\t\t\topts.width = 2;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar spinnerDiv = document.getElementById(\"slgButtonSpinner_spinner_\" + scope.$id);\r\n\t\t\t\tspinnerDiv.style.display = \"inline-block\";\r\n\t\t\t\tvar spinner = new slgSpinner(opts).spin(spinnerDiv);\r\n\t\t\t}\r\n\r\n\t\t\tfunction hideSpinner() {\r\n\t\t\t\tvar spinnerDiv = document.getElementById(\"slgButtonSpinner_spinner_\" + scope.$id);\r\n\t\t\t\tspinnerDiv.style.display = \"none\";\r\n\t\t\t}\r\n\r\n\t\t\tfunction waitForInProcessToFinish() {\r\n\t\t\t\tif (scope.inProcess === false)\r\n\t\t\t\t\treturn $q.when();\r\n\r\n\t\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t\tvar infiniteLoopCheck = 100;\r\n\t\t\t\tvar waitingInterval = $interval(function () {\r\n\t\t\t\t\tif (scope.inProcess === false || (infiniteLoopCheck-- <= 0)) {\r\n\t\t\t\t\t\t$interval.cancel(waitingInterval);\r\n\t\t\t\t\t\tif (infiniteLoopCheck <= 0)\r\n\t\t\t\t\t\t\tconsole.log(\"slgButtonSpinner wait failed\");\r\n\r\n\t\t\t\t\t\tdeferred.resolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 50);\r\n\r\n\t\t\t\treturn deferred.promise;\r\n\t\t\t}\r\n\r\n\t\t\tscope.$on(\"$destroy\", function () {\r\n\t\t\t\t$timeout.cancel(scope.waitToShowSpinner);\r\n\t\t\t\t$timeout.cancel(scope.okTimeout);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}]);\nangular.module('slgComponents')\r\n.directive('slgAutoComplete', ['$timeout', '$interval', '$compile', function ($timeout, $interval, $compile) {\r\n\treturn {\r\n\t\trestrict: 'A',\r\n\t\tscope: {\r\n\t\t\tngModel: \"=\",\r\n\t\t\tselectedModel: \"=?slgAutoCompleteSelectedModel\",\r\n\t\t\tgetUrl: \"@?slgAutoCompleteGetUrl\",\r\n\t\t\tdataList: \"=?slgAutoCompleteDataList\",\r\n\t\t\tminChars: \"=?slgAutoCompleteMinChars\",\r\n\t\t\tallowFreeFormText: \"=?slgAutoCompleteAllowFreeFormText\",\r\n\t\t\tdelay: \"=?slgAutoCompleteDelay\",\r\n\t\t\twidth: \"@?slgAutoCompleteWidth\",\r\n\t\t\theight: \"@?slgAutoCompleteHeight\",\r\n\t\t\tlistFormatter: \"&?slgAutoCompleteListFormatter\",\r\n\t\t\ttextboxFormatter: \"&?slgAutoCompleteTextboxFormatter\"\r\n\t\t},\r\n\t\trequire: 'ngModel',\r\n\t\tlink: function (scope, element, attrs, ngModelCtrl) {\r\n\t\t\tif (!attrs[\"id\"])\r\n\t\t\t\telement[0].setAttribute('id', 'slgAutoComplete_textbox_' + scope.$id);\r\n\r\n\t\t\tscope.textboxId = element.attr(\"id\");\r\n\r\n\t\t\tvar timeout = 100;\r\n\t\t\tscope.waitForAutoCompleteToRender = $interval(function () {\r\n\t\t\t\tvar slgAutoCompleteElement = document.getElementById('slgAutoComplete_' + scope.$id);\r\n\r\n\t\t\t\tif (slgAutoCompleteElement || timeout <= 0) {\r\n\t\t\t\t\t$interval.cancel(scope.waitForAutoCompleteToRender);\r\n\r\n\t\t\t\t\tif (timeout === 0) {\r\n\t\t\t\t\t\tconsole.log(\"Element not found\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (scope.height)\r\n\t\t\t\t\t\tslgAutoCompleteElement.style.maxHeight = scope.height;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tslgAutoCompleteElement.style.maxHeight = \"200px\";\r\n\r\n\t\t\t\t\tif (scope.width) {\r\n\t\t\t\t\t\tslgAutoCompleteElement.style.width = scope.width;\r\n\t\t\t\t\t\tslgAutoCompleteElement.style.minWidth = scope.width;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvar textboxWidth = element.prop('offsetWidth');\r\n\t\t\t\t\t\tscope.resize();\r\n\r\n\t\t\t\t\t\tscope.resizeEvent = window.addEventListener('resize', scope.resize, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, 50);\r\n\r\n\t\t\tscope.resize = function () {\r\n\t\t\t\tif (!scope.width) {\r\n\t\t\t\t\tvar textboxWidth = element.prop('offsetWidth');\r\n\t\t\t\t\tdocument.getElementById('slgAutoComplete_' + scope.$id).style.width = textboxWidth + \"px\";\r\n\t\t\t\t\tdocument.getElementById('slgAutoComplete_' + scope.$id).style.minWidth = textboxWidth + \"px\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdocument.addEventListener('click', hideList, false);\r\n\t\t\tfunction hideList(e) {\r\n\t\t\t\tvar el = angular.element(e.target);\r\n\r\n\t\t\t\t// If they clicked on this textbox, don't hide the list\r\n\t\t\t\tif (el.attr(\"id\") === scope.textboxId) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If they clicked on the li, get the underlying ul and check for the id\r\n\t\t\t\tel = angular.element(el[0].parentNode);\r\n\t\t\t\tif (el.attr(\"id\") === 'slgAutoComplete_' + scope.$id)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tscope.visible = false;\r\n\r\n\r\n\t\t\t\tif (scope.allowFreeFormText === true) {\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (scope.selectedModel)\r\n\t\t\t\t\t\tscope.ngModel = scope.textboxFormatter({ item: scope.selectedModel });\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tscope.ngModel = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.$apply();\r\n\t\t\t}\r\n\r\n\t\t\tvar html =\r\n\t\t\t\t\"<ul ng-show='visible' ng-mouseout='selectedIndex = -1;' id='slgAutoComplete_{{$id}}' class='slgAutoComplete list-group'> \" +\r\n\t\t\t\t\"\t<li id='slg_{{$index}}' data-index='{{$index}}' ng-repeat='item in visibleListItems' class='list-group-item list-group-item-action' ng-class='{ \\\"active\\\" : selectedIndex === $index }' ng-mouseover='onMouseOver($index)' ng-click='onClick($index)' ng-bind-html='item.text | toTrusted'>{{item.text}}</li>\" +\r\n\t\t\t\t\"</ul>\";\r\n\r\n\r\n\t\t\tvar compiled = $compile(html)(scope);\r\n\t\t\telement.after(compiled);\r\n\r\n\t\t\telement.bind('focus', function (e) {\r\n\t\t\t\tif (!scope.visibleListItems || scope.visibleItems.length === 0)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tscope.selectedIndex = -1;\r\n\t\t\t\tscope.visible = true;\r\n\t\t\t\tscope.$apply();\r\n\t\t\t});\r\n\r\n\t\t\telement.bind('keydown', function (e) {\r\n\t\t\t\t// down arrow\r\n\t\t\t\tif (e.which === 40) {\r\n\t\t\t\t\tif (!scope.visibleListItems || scope.visibleItems.length === 0)\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tscope.visible = true;\r\n\r\n\t\t\t\t\tscope.selectedIndex++;\r\n\r\n\t\t\t\t\tif (scope.selectedIndex >= scope.visibleListItems.length - 1)\r\n\t\t\t\t\t\tscope.selectedIndex = scope.visibleListItems.length - 1;\r\n\r\n\t\t\t\t\tscrollIntoView();\r\n\r\n\t\t\t\t\tscope.$apply();\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.which === 38) {\r\n\t\t\t\t\tif (!scope.visibleListItems || scope.visibleItems.length === 0)\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tscope.visible = true;\r\n\r\n\t\t\t\t\tscope.selectedIndex--;\r\n\r\n\t\t\t\t\tif (scope.selectedIndex < 0)\r\n\t\t\t\t\t\tscope.selectedIndex = 0;\r\n\r\n\t\t\t\t\tscrollIntoView();\r\n\r\n\t\t\t\t\tscope.$apply();\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.which === 9) {\r\n\t\t\t\t\tif (scope.allowFreeFormText === true && scope.selectedIndex === -1) {\r\n\t\t\t\t\t\t$timeout.cancel(scope.delayTimeout);\r\n\t\t\t\t\t\t//scope.selectedModel = null;\r\n\t\t\t\t\t\tscope.visible = false;\r\n\t\t\t\t\t\tscope.selectedIndex = -1;\r\n\t\t\t\t\t\tscope.$apply();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (scope.delayTimeout || scope.loadingData === true)\r\n\t\t\t\t\t\tscope.selectFirstItemAfterLoad = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tscope.onClick((scope.selectedIndex === -1) ? 0 : scope.selectedIndex);\r\n\r\n\t\t\t\t\tscope.$apply();\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.which === 13) {\r\n\t\t\t\t\tif (scope.selectedIndex === -1)\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t// If we're still loading the data, but \r\n\t\t\t\t\tif (scope.loadingData === true)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tscope.onClick((scope.selectedIndex === -1) ? 0 : scope.selectedIndex);\r\n\t\t\t\t\t\tscope.$apply();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.which === 8 || e.which === 46) {\r\n\t\t\t\t\t$timeout.cancel(scope.delayTimeout);\r\n\r\n\t\t\t\t\tscope.delayTimeout = $timeout(function () {\r\n\t\t\t\t\t\tscope.delayTimeout = null;\r\n\t\t\t\t\t\tscope.searchText = scope.ngModel;\r\n\r\n\t\t\t\t\t\tscope.refreshList();\r\n\t\t\t\t\t}, scope.delay);\r\n\t\t\t\t}\r\n\t\t\t\telse if (e.which === 27) {\r\n\t\t\t\t\tif (scope.selectedIndex > -1)\r\n\t\t\t\t\t\tscope.selectedIndex = -1;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tscope.visible = false;\r\n\r\n\t\t\t\t\tscope.$apply();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tfunction scrollIntoView() {\r\n\t\t\t\tvar slgAutoCompleteElement = document.getElementById('slgAutoComplete_' + scope.$id);\r\n\r\n\t\t\t\tvar selectedItem = slgAutoCompleteElement.querySelectorAll(\"[data-index='\" + scope.selectedIndex + \"']\")[0];\r\n\r\n\t\t\t\tvar scrollTop = slgAutoCompleteElement.scrollTop;\r\n\t\t\t\tvar scrollBottom = slgAutoCompleteElement.scrollTop + slgAutoCompleteElement.clientHeight;\r\n\r\n\t\t\t\tvar liTop = selectedItem.offsetTop;\r\n\t\t\t\tvar liBottom = liTop + selectedItem.clientHeight;\r\n\r\n\t\t\t\tif (liTop < scrollTop)\r\n\t\t\t\t\tslgAutoCompleteElement.scrollTop = selectedItem.offsetTop;\r\n\t\t\t\telse if (liBottom > scrollBottom)\r\n\t\t\t\t\tslgAutoCompleteElement.scrollTop += selectedItem.clientHeight + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\telement.bind('keypress', function (e) {\r\n\t\t\t\tif (e.which === 13)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t$timeout.cancel(scope.delayTimeout);\r\n\r\n\t\t\t\tscope.delayTimeout = $timeout(function () {\r\n\t\t\t\t\tscope.delayTimeout = null;\r\n\t\t\t\t\tscope.searchText = scope.ngModel;\r\n\r\n\t\t\t\t\tscope.refreshList();\r\n\t\t\t\t}, scope.delay);\r\n\t\t\t});\r\n\r\n\t\t\telement.bind('focus', function (e) {\r\n\t\t\t\tscope.selectFirstItemAfterLoad = false;\r\n\t\t\t});\r\n\r\n\r\n\t\t\tscope.$on(\"$destroy\", function () {\r\n\t\t\t\telement.unbind('keypress');\r\n\t\t\t\twindow.removeEventListener('resize', scope.resize, false);\r\n\t\t\t\tdocument.removeEventListener('click', hideList, false);\r\n\t\t\t})\r\n\t\t},\r\n\t\tcontroller: ['$scope', '$interval', '$http', '$q', '$sce', function ($scope, $interval, $http, $q, $sce) {\r\n\t\t\t$scope.delay = $scope.delay || 300;\r\n\t\t\t$scope.minChars = $scope.minChars || 3;\r\n\t\t\t$scope.height = $scope.height || \"200px\";\r\n\t\t\t$scope.allowFreeFormText = $scope.allowFreeFormText || false;\r\n\t\t\t$scope.loadingData = false;\r\n\t\t\t$scope.selectedIndex = -1;\r\n\t\t\t$scope.selectFirstItemAfterLoad = false;\r\n\t\t\t$scope.visible = false;\r\n\r\n\t\t\t$scope.onMouseOver = function (idx) {\r\n\t\t\t\t$scope.selectedIndex = idx;\r\n\t\t\t}\r\n\r\n\t\t\t$scope.onClick = function (idx) {\r\n\t\t\t\t$scope.visible = false;\r\n\r\n\t\t\t\tif (idx === -1 || (!$scope.visibleItems || $scope.visibleItems.length === 0)) {\r\n\t\t\t\t\tif ($scope.selectedModel && $scope.textboxFormatter)\r\n\t\t\t\t\t\t$scope.ngModel = $scope.textboxFormatter({ item: $scope.selectedModel });\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t$scope.ngModel = null;\r\n\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($scope.selectedModel !== undefined)\r\n\t\t\t\t\t$scope.selectedModel = $scope.visibleItems[idx];\r\n\r\n\t\t\t\tif ($scope.textboxFormatter) {\r\n\t\t\t\t\t$scope.ngModel = $scope.textboxFormatter({ item: $scope.visibleItems[idx] });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$scope.$watch(\"selectedModel\", function () {\r\n\t\t\t\tif ($scope.selectedModel === null || $scope.selectedModel === undefined) {\r\n\t\t\t\t\tif ($scope.allowFreeFormText === false)\r\n\t\t\t\t\t\t$scope.ngModel = null;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif ($scope.textboxFormatter)\r\n\t\t\t\t\t\t$scope.ngModel = $scope.textboxFormatter({ item: $scope.selectedModel });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$scope.$watch('dataList', function () {\r\n\t\t\t\t$scope.allItems = $scope.dataList;\r\n\t\t\t});\r\n\r\n\t\t\t$scope.refreshList = function () {\r\n\t\t\t\t$scope.visibleItems = [];\r\n\t\t\t\t$scope.visibleListItems = [];\r\n\r\n\t\t\t\tif (!$scope.ngModel || $scope.ngModel === '') {\r\n\t\t\t\t\t$scope.visible = false;\r\n\t\t\t\t\t$scope.selectedModel = null;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$scope.searchText || $scope.searchText === '')\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tgetItems().then(function (items) {\r\n\t\t\t\t\t$scope.allItems = items;\r\n\r\n\t\t\t\t\t$scope.formattedItems = [];\r\n\r\n\t\t\t\t\tvar exactMatchItems = [];\r\n\t\t\t\t\tvar exactMatchListItems = [];\r\n\t\t\t\t\tvar partialMatchItems = [];\r\n\t\t\t\t\tvar partialMatchListItems = [];\r\n\t\t\t\t\tvar searchTerms = $scope.searchText.split(' ');\r\n\r\n\t\t\t\t\tangular.forEach($scope.allItems, function (item) {\r\n\t\t\t\t\t\tif ($scope.listFormatter) {\r\n\t\t\t\t\t\t\tvar formattedString = $scope.listFormatter({ item: item });\r\n\r\n\t\t\t\t\t\t\tif (formattedString.replace(/[\"']/g, \"\").toLowerCase().indexOf($scope.searchText.replace(/[\"']/g, \"\").toLowerCase()) >= 0) {\r\n\t\t\t\t\t\t\t\tvar index = formattedString.replace(/[\"']/g, \"\").toLowerCase().indexOf($scope.searchText.toLowerCase());\r\n\t\t\t\t\t\t\t\tvar length = $scope.searchText.length;\r\n\r\n\t\t\t\t\t\t\t\t// see if there was a single quote\r\n\t\t\t\t\t\t\t\tvar hasSingleQuote = formattedString.substring(0, index + length + 1).indexOf(\"'\") > 0;\r\n\r\n\t\t\t\t\t\t\t\tif (hasSingleQuote)\r\n\t\t\t\t\t\t\t\t\tlength++;\r\n\r\n\t\t\t\t\t\t\t\tvar exactMatchStringStart = formattedString.substring(0, index);\r\n\t\t\t\t\t\t\t\tvar exactMatchStringMiddle = formattedString.substring(index, index + length);\r\n\t\t\t\t\t\t\t\tvar exactMatchStringEnd = formattedString.substring(index + length, formattedString.length);\r\n\r\n\t\t\t\t\t\t\t\tvar exactMatchString = exactMatchStringStart + \"<span class='slgAutoCompleteHighlight'>\" + exactMatchStringMiddle + \"</span>\" + exactMatchStringEnd;\r\n\t\t\t\t\t\t\t\texactMatchItems.push(item);\r\n\t\t\t\t\t\t\t\texactMatchListItems.push(exactMatchString);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tvar searchTerms = $scope.searchText.toLowerCase().split(' ');\r\n\r\n\t\t\t\t\t\t\t\tvar highlightedString = ''\r\n\r\n\t\t\t\t\t\t\t\tvar highlightPositions = [];\r\n\r\n\t\t\t\t\t\t\t\tangular.forEach(searchTerms, function (searchTerm, index) {\r\n\t\t\t\t\t\t\t\t\tvar lowercaseString = formattedString.toLowerCase();\r\n\t\t\t\t\t\t\t\t\tvar currentIndex = 0;\r\n\t\t\t\t\t\t\t\t\tvar infiniteLoopCheck = 10;\r\n\r\n\t\t\t\t\t\t\t\t\twhile (lowercaseString.replace(/[\"']/g, \"\").indexOf(searchTerm.replace(/[\"']/g, \"\"), currentIndex) >= 0 && --infiniteLoopCheck > 0) {\r\n\t\t\t\t\t\t\t\t\t\tcurrentIndex = lowercaseString.replace(/[\"']/g, \"\").indexOf(searchTerm.replace(/[\"']/g, \"\"), currentIndex);\r\n\r\n\t\t\t\t\t\t\t\t\t\t// see if there was a single quote\r\n\t\t\t\t\t\t\t\t\t\tvar hasSingleQuote = lowercaseString.substring(currentIndex, currentIndex + searchTerm.length + 1).indexOf(\"'\") > 0;\r\n\t\t\t\t\t\t\t\t\t\tif (hasSingleQuote) {\r\n\t\t\t\t\t\t\t\t\t\t\thighlightPositions.push({ index: currentIndex, length: searchTerm.length + 1 });\r\n\t\t\t\t\t\t\t\t\t\t\tcurrentIndex += 2;\t// If we leave it at the current position, it will just keep finding the same item\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\thighlightPositions.push({ index: currentIndex, length: searchTerm.length  });\r\n\t\t\t\t\t\t\t\t\t\t\tcurrentIndex++;\t// If we leave it at the current position, it will just keep finding the same item\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif (highlightPositions.length > 0) {\r\n\t\t\t\t\t\t\t\t\thighlightPositions.sort(function (a, b) { return (a.index === b.index) ? (a.length > b.length) ? 1 : (a.length < b.length) ? -1 : 0 : (a.index > b.index) ? 1 : ((b.index > a.index) ? -1 : 0); });\r\n\r\n\t\t\t\t\t\t\t\t\tvar tempArray = [];\r\n\t\t\t\t\t\t\t\t\tangular.forEach(highlightPositions, function (element, index) {\r\n\t\t\t\t\t\t\t\t\t\ttempArray.push(highlightPositions[index])\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (index > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tvar previousIndex = highlightPositions[index - 1].index;\r\n\t\t\t\t\t\t\t\t\t\t\tvar previousLength = highlightPositions[index - 1].length;\r\n\t\t\t\t\t\t\t\t\t\t\tvar thisIndex = highlightPositions[index].index;\r\n\t\t\t\t\t\t\t\t\t\t\tvar thisLength = highlightPositions[index].length;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// If the strings are something like this...  ABCDEFG [ABCDE] and [BCD], the BCD is inside the ABCDE, so just leave it alone.\r\n\t\t\t\t\t\t\t\t\t\t\t// Else, it will be something like [ABCD] and [CDEF].  We need to move the length to include the EF\r\n\t\t\t\t\t\t\t\t\t\t\tif (previousIndex + previousLength > thisIndex) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// remove the last one added since we are combining them\r\n\t\t\t\t\t\t\t\t\t\t\t\ttempArray.pop(tempArray.length - 1);\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (thisIndex + thisLength > previousIndex + previousLength)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttempArray[tempArray.length - 1].length = ((thisIndex + thisLength) - previousIndex);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\thighlightPositions = tempArray;\r\n\r\n\t\t\t\t\t\t\t\t\tangular.forEach(highlightPositions, function (position, index) {\r\n\t\t\t\t\t\t\t\t\t\tif (index === 0)\r\n\t\t\t\t\t\t\t\t\t\t\thighlightedString = formattedString.substring(0, highlightPositions[0].index);\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\thighlightedString += formattedString.substring(highlightPositions[index - 1].index + highlightPositions[index - 1].length, highlightPositions[index].index);\r\n\t\t\t\t\t\t\t\t\t\thighlightedString += \"<span class='slgAutoCompleteHighlight'>\";\r\n\t\t\t\t\t\t\t\t\t\thighlightedString += formattedString.substring(position.index, position.index + position.length);\r\n\t\t\t\t\t\t\t\t\t\thighlightedString += \"</span>\";\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\thighlightedString += formattedString.substring(highlightPositions[highlightPositions.length - 1].index + highlightPositions[highlightPositions.length - 1].length, formattedString.length);\r\n\t\t\t\t\t\t\t\t\tpartialMatchItems.push(item);\r\n\t\t\t\t\t\t\t\t\tpartialMatchListItems.push(highlightedString);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t$scope.visibleItems = $scope.visibleItems.concat(exactMatchItems);\r\n\t\t\t\t\t$scope.visibleItems = $scope.visibleItems.concat(partialMatchItems);\r\n\r\n\t\t\t\t\tangular.forEach(exactMatchListItems, function (item) {\r\n\t\t\t\t\t\t$scope.visibleListItems.push({\r\n\t\t\t\t\t\t\tid: slgGuid(),\r\n\t\t\t\t\t\t\ttext: item\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tangular.forEach(partialMatchListItems, function (item) {\r\n\t\t\t\t\t\t$scope.visibleListItems.push({\r\n\t\t\t\t\t\t\tid: slgGuid(),\r\n\t\t\t\t\t\t\ttext: item\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t$scope.resize();\r\n\t\t\t\t\t$scope.visible = $scope.visibleItems.length > 0;\r\n\t\t\t\t\t$scope.selectedIndex = ($scope.visibleItems.length > 0) ? 0 : -1;\r\n\r\n\t\t\t\t\tif ($scope.allowFreeFormText == true) {\r\n\t\t\t\t\t\t$scope.selectedIndex = -1;\r\n\t\t\t\t\t\tvar activeElement = angular.element(document.activeElement);\r\n\t\t\t\t\t\tif (activeElement.attr('id') !== $scope.textboxId) \r\n\t\t\t\t\t\t\t$scope.visible = false;\r\n\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ($scope.selectFirstItemAfterLoad === true) {\r\n\t\t\t\t\t\t$scope.selectFirstItemAfterLoad = false;\r\n\r\n\t\t\t\t\t\tif ($scope.allowFreeFormText === true && $scope.visibleItems.length === 0) {\r\n\t\t\t\t\t\t\t$scope.selectedModel = null;\r\n\t\t\t\t\t\t\t$scope.visible = false;\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t$scope.selectedIndex = 0;\r\n\t\t\t\t\t\t$scope.onClick(0);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tfunction getItems() {\r\n\t\t\t\tif ($scope.searchText.length < $scope.minChars)\r\n\t\t\t\t\treturn $q.when($scope.allItems);\r\n\r\n\t\t\t\tif ($scope.dataList)\r\n\t\t\t\t\treturn $q.when($scope.dataList);\r\n\r\n\t\t\t\telse if ($scope.getUrl) {\r\n\t\t\t\t\tvar deferred = $q.defer();\r\n\r\n\t\t\t\t\t$scope.loadingData = true;\r\n\r\n\t\t\t\t\tvar url = $scope.getUrl;\r\n\t\t\t\t\tif (url.indexOf(\"?\") > 0)\r\n\t\t\t\t\t\turl += \"&searchText=\" + $scope.searchText;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\turl += \"?searchText=\" + $scope.searchText;\r\n\r\n\t\t\t\t\t$http.get(url)\r\n\t\t\t\t\t    .then(function (response) {\r\n\t\t\t\t\t    \t$scope.loadingData = false;\r\n\t\t\t\t\t    \tdeferred.resolve(response.data);\r\n\t\t\t\t\t    },\r\n\t\t\t\t\t\tfunction (response) {\r\n\t\t\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\treturn deferred.promise;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction hideList() {\r\n\r\n\t\t\t}\r\n\t\t}]\r\n\t}\r\n}])\r\n.filter(\"toTrusted\", ['$sce', function ($sce) {\r\n\treturn function (text) {\r\n\t\treturn $sce.trustAsHtml(text);\r\n\t}\r\n}]);\r\n\nangular.module('slgComponents')\r\n .service(\"slgPleaseWaitSvc\", ['$timeout', function ($timeout) {\r\n \tvar slgPleaseWaitModel = { count: 0, spinner: null, slgPleaseWaitTimeout: null, safetyTimeout: null };\r\n\r\n \tvar el = angular.element(\"<div id='slgPleaseWaitOverlay'><div id='slgPleaseWaitSpinner'></div></div>\");\r\n \tdocument.body.appendChild(el[0]);\r\n\r\n \tvar opts = {\r\n \t\tlines: 13, // The number of lines to draw\r\n \t\tlength: 15, // The length of each line\r\n \t\twidth: 10, // The line thickness\r\n \t\tradius: 20, // The radius of the inner circle\r\n \t\tcorners: 1, // Corner roundness (0..1)\r\n \t\trotate: 0, // The rotation offset\r\n \t\tdirection: 1, // 1: clockwise, -1: counterclockwise\r\n \t\tcolor: '#fff', // #rgb or #rrggbb or array of colors\r\n \t\tspeed: 1, // Rounds per second\r\n \t\ttrail: 60, // Afterglow percentage\r\n \t\tshadow: false, // Whether to render a shadow\r\n \t\thwaccel: false, // Whether to use hardware acceleration\r\n \t\tzIndex: 2e9 // The z-index (defaults to 2000000000)\r\n \t};\r\n\r\n \tslgPleaseWaitModel.spinner = new slgSpinner(opts).spin(document.getElementById('slgPleaseWaitSpinner'));\r\n\r\n \tfunction show(timeoutDelay) {\r\n \t\ttimeoutDelay = (timeoutDelay === null || timeoutDelay === undefined) ? 300 : timeoutDelay;\r\n\r\n \t\tif (slgPleaseWaitModel.count === 0) {\r\n \t\t\tslgPleaseWaitModel.safetyTimeout = $timeout(function () { hidePleaseWait_Internal(); }, 10000);\r\n\r\n \t\t\tslgPleaseWaitModel.slgPleaseWaitTimeout = $timeout(function () {\r\n \t\t\t\tshowPleaseWait_Internal();\r\n \t\t\t}, timeoutDelay);\r\n \t\t}\r\n\r\n \t\tslgPleaseWaitModel.count++;\r\n \t}\r\n\r\n \tfunction forceShow() {\r\n \t\tshowPleaseWait_Internal();\r\n \t}\r\n\r\n \tfunction forceHide() {\r\n \t\tslgPleaseWaitModel.count = 0;\r\n\t\thidePleaseWait_Internal();\r\n \t}\r\n\r\n \tfunction hide() {\r\n \t\tif (slgPleaseWaitModel.count === 0)\r\n \t\t\treturn;\r\n\r\n \t\tslgPleaseWaitModel.count--;\r\n\r\n \t\tif (slgPleaseWaitModel.count === 0)\r\n \t\t\thidePleaseWait_Internal();\r\n \t}\r\n\r\n \tfunction showPleaseWait_Internal() {\r\n \t\tvar element = document.getElementById(\"slgPleaseWaitOverlay\");\r\n\r\n \t\telement.style.display = 'inline-block';\r\n \t}\r\n\r\n \tfunction hidePleaseWait_Internal() {\r\n \t\tvar element = document.getElementById(\"slgPleaseWaitOverlay\");\r\n\r\n \t\telement.style.display = \"none\";\r\n \t\t$timeout.cancel(slgPleaseWaitModel.slgPleaseWaitTimeout);\r\n \t\t$timeout.cancel(slgPleaseWaitModel.safetyTimeout);\r\n \t}\r\n\r\n \treturn {\r\n \t\tshow: show,\r\n \t\thide: hide,\r\n \t\tforceShow: forceShow,\r\n \t\tforceHide: forceHide\r\n \t}\r\n }]);\r\n"],"file":"slgComponents.min.js","sourceRoot":"/source/"}